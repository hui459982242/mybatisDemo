<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="zh.mybatis.dao.UserMapper">
    <resultMap id="userMap" type="zh.mybatis.domain.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword"  column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap" extends="userMap" type="zh.mybatis.domain.SysUser">
        <association property="role" columnPrefix="role_"
                     resultMap="zh.mybatis.dao.RoleMapper.roleMap"/>
        <!-- 下面的写法比较麻烦，上面的写法是把下面的部分拿到了RoleMapper.xml里了，这样引用就可以达到一样的效果 -->
        <!--<association property="role" columnPrefix="role_"
                     javaType="zh.mybatis.domain.SysRole">
            <result property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled"  column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>-->
    </resultMap>


    <resultMap id="userRoleMapSelect" extends="userMap"
               type="zh.mybatis.domain.SysUser">
        <!-- 需要把fetchType 设置为lazy，这样设置后，只有当调用getRole（）方法获取role的时候，
        MyBatis 才会执行嵌套查询去获取数据 -->
        <association property="role" column="{id=role_id}" fetchType="lazy"
                     select="zh.mybatis.dao.RoleMapper.selectRoleById"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>
    <select id="selectAll" resultType="zh.mybatis.domain.SysUser">
        select id,
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time from sys_user
    </select>
    <!-- 尽量在class中使用驼峰命名法 -->
    <select id="selectRolesByUserId" resultType="zh.mybatis.domain.SysRole">
        SELECT r.id,
        r.role_name,
        r.enabled,
        r.creat_by,
        r.create_time,
        u.user_name as "user.userName",
        u.user_email as "user.userEmail"
        from sys_user u
        INNER JOIN sys_user_role ur on u.id=ur.user_id
        INNER JOIN sys_role r on ur.role_id=r.id
        WHERE u.id=#{userId}
    </select>
    <insert id="insert">
        INSERT INTO sys_user (
        id,user_name,user_password,user_email,
        user_info,head_img,create_time)
        VALUES (#{id},#{userName},#{userPassword},#{userEmail},
        #{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    </insert>

    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (
        id,user_name,user_password,user_email,
        user_info,head_img,create_time)
        VALUES (#{id},#{userName},#{userPassword},#{userEmail},
        #{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insert3">
        INSERT INTO sys_user (
        id,user_name,user_password,user_email,
        user_info,head_img,create_time)
        VALUES (#{id},#{userName},#{userPassword},#{userEmail},
        #{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
        <selectKey keyProperty="id" keyColumn="id" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateById">
        UPDATE sys_user SET user_name=#{userName},
        user_password=#{userPassword},
        user_email=#{userEmail},
        user_info=#{userInfo},
        head_img=#{headImg,jdbcType=BLOB},
        create_time=#{createTime,jdbcType=TIMESTAMP}
        WHERE id=#{id}
    </update>
    <delete id="deleteById">
        DELETE FROM sys_user WHERE id=#{id}
    </delete>
    <select id="selectRolesByUseridAndRoleEnabled" resultType="zh.mybatis.domain.SysRole">
        SELECT r.id,
        r.role_name,
        r.enabled,
        r.creat_by,
        r.create_time,
        u.user_name as "user.userName",
        u.user_email as "user.userEmail"
        from sys_user u
        INNER JOIN sys_user_role ur on u.id=ur.user_id
        INNER JOIN sys_role r on ur.role_id=r.id
        WHERE u.id=#{userId} and r.enabled=#{enabled}
    </select>
    <select id="selectByUser" resultType="zh.mybatis.domain.SysUser">
        SELECT id,
        user_name userName,
        user_password userPassword,
        user_email userEma工1,
        user_info userinfo,
        head_img  headimg,
        create_time createTime
        from sys_user WHERE 1=1
        <if test="userName != null and userName != ''">
            and user_name LIKE concat('%',#{userName},'%')
        </if>
        <if test="userEmail != null and userEmail != ''">
            and user_email = #{userEmail}
        </if>
    </select>
    <update id="updateByldSelective">
        UPDATE sys_user SET
      <if test="userName!=null and userName!=''">
        user_name = #{userName},
      </if>
      <if test="userPassword!=null and userPassword!=''">
        user_password = #{userPassword},
      </if>
      <if test="userEmail!=null and userEmail!=''">
        user_email = #{userEmail},
      </if>
      <if test="userInfo!=null and userlnfo!=''">
        user_info = #{userInfo},
      </if>
      <if test="headImg!=null">
        head_img = #{headImg,jdbcType=BLOB},
      </if>
      <if test="createTime!=null">
        create_time = #{createTime, jdbcType=TIMESTAMP},
      </if>
      id = #{id}
      where id = #{id}
    </update>
    <insert id="insert2Dynamic">
        insert into sys_user(
        user_name,user_password,
        <if test="userEmail!=null and userEmail!=''">
          user_email,
        </if>
        user_info,head_img,create_time)
        values(
        #{userName},#{userPassword},
        <if test="userEmail!=null and userEmail!=''">
          #{userEmail},
        </if>
        #{userInfo},#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP})
        <selectKey keyProperty="id" keyColumn="id" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <select id="selectByidOrUserName" resultType="zh.mybatis.domain.SysUser">
        SELECT id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        FROM sys_user
        WHERE 1=1
        <choose>
            <when test="id!=null">
                and id=#{id}
            </when>
            <otherwise>
                and 1=2
            </otherwise>
        </choose>
    </select>
    <select id="selectByidList1" resultType="zh.mybatis.domain.SysUser">
        SELECT id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        FROM sys_user
        WHERE id IN
        <foreach collection="list" open="(" close=")" item="id" index="i" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="selectByidList2" resultType="zh.mybatis.domain.SysUser" parameterType="zh.mybatis.domain.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time
        FROM sys_user
        WHERE id IN
        <foreach collection="list" open="(" close=")" item="id" index="i" separator=",">
            #{id}
        </foreach>
    </select>
    <update id="updateByMap">
        UPDATE sys_user SET
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key}=#{val}
        </foreach>
        WHERE id=#{id}
    </update>
    <select id="selectRolesByUserid" resultType="zh.mybatis.domain.SysUser">
        SELECT u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.user_info userinfo,
        u.head_img headimg,
        u.create_time createTime,
        r.id "role.id",
        r.role_name "role.roleName",
        r.enabled "role.enabled",
        r.create_by "role.createBy",
        r.create_time "role.createTime"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r  on ur.role_id= r.id
        where u.id = #{id}
    </select>
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u. user_info,
        u.head_img,
        u.create_time,
        r.id role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time  role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r  on ur.role_id = r.id
        where u.id = #{id}
    </select>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u. user_info,
        u.head_img,
        u.create_time,
        ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>
</mapper>